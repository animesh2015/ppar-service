/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.lang.Error;


public interface PPARSwaggerApi {

    @Operation(summary = "", description = "", tags = {"Flag Setup Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InterSetupResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARFlagSetup/inter",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARFlagSetupInterPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody InterSetupRequest body
    );


    @Operation(summary = "", description = "", tags = {"Flag Setup Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RTPSetupResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARFlagSetup/rtp",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARFlagSetupRtpPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody RTPSetupRequest body
    );


    @Operation(summary = "", description = "", tags = {"Inquiry Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BranchResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARInquiry/Branch",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARInquiryBranchPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody BranchRequest body
    );


    @Operation(summary = "", description = "", tags = {"Inquiry Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DailyResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARInquiry/Daily",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARInquiryDailyPost(@Parameter(in = ParameterIn.HEADER, description = "", required = false, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = false) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = false, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = false) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = false, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = false) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = false, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = false) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody DailyRequest body
    );


    @Operation(summary = "", description = "", tags = {"Inquiry Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PromptpayResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARInquiry/PromptpayINQ2",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARInquiryPromptpayINQ2Post(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody PromptpayRequest body
    );


    @Operation(summary = "", description = "", tags = {"Inquiry Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeregisterResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARInquiry/VerifyDeregister",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARInquiryVerifyDeregisterPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody DeregisterRequest body
    );


    @Operation(summary = "", description = "", tags = {"Lookup Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PromptPayLookUpAndRTPResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARLookup/promptpaylookup",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARLookupPromptpaylookupPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody PromptPayLookUpRequest body
    );


    @Operation(summary = "", description = "", tags = {"Lookup Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PromptPayLookUpAndRTPResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARLookup/promptpaylookup/rtp",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARLookupPromptpaylookupRtpPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody PromptPayRTPLookUpRequest body
    );


    @Operation(summary = "", description = "", tags = {"Registration Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CHACResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARRegister/changeAccount",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARRegisterChangeAccountPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody CHACRequest body
    );


    @Operation(summary = "", description = "", tags = {"Registration Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DGISResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARRegister/deregister",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARRegisterDeregisterPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody DGISRequest body
    );


    @Operation(summary = "", description = "", tags = {"Registration Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RGISResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARRegister/register",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARRegisterRegisterPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody RGISRequest body
    );


    @Operation(summary = "", description = "", tags = {"Registration Service"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyResponse.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @RequestMapping(value = "/PPARSwagger/PPARRegister/verify",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> pPARSwaggerPPARRegisterVerifyPost(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Branch", required = true) String bbLBranch
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Channel", required = true) String bbLChannel
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Teller", required = true) String bbLTeller
            , @Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema()) @RequestHeader(value = "BBL-Terminal", required = true) String bbLTerminal
            , @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema())  @RequestBody VerifyRequest body
    );

}

